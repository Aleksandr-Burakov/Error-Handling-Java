// Напишите приложение, которое будет запрашивать у пользователя следующие данные
// в произвольном порядке, разделенные пробелом:
// Фамилия Имя Отчество дата рождения номер телефона пол
// Форматы данных:
// фамилия, имя, отчество - строки
// дата рождения - строка формата dd.mm.yyyy
// номертелефона - целое беззнаковое число без форматирования
// пол - символ латиницей f или m.
// Приложение должно проверить введенные данные по количеству. 
// Если количество не совпадает с требуемым, вернуть код ошибки,
// обработать его и показать пользователю сообщение, 
// что он ввел меньше и больше данных, чем требуется.
// Приложение должно попытаться распарсить полученные значения и 
// выделить из них требуемые параметры. Если форматы данных не совпадают,
// нужно бросить исключение, соответствующее типу проблемы.
// Можно использовать встроенные типы java и создать свои. Исключение должно быть корректно обработано, пользователю выведено сообщение с информацией, что именно неверно.
// Если всё введено и обработано верно, должен создаться файл с названием,
// равным фамилии, в него в одну строку должны записаться полученные данные,
// вида <Фамилия><Имя><Отчество><датарождения> <номертелефона><пол>
// Однофамильцы должны записаться в один и тот же файл, в отдельные строки.
// Не забудьте закрыть соединение с файлом.
// При возникновении проблемы с чтением-записью в файл,
// исключение должно быть корректно обработано, пользователь должен увидеть стектрейс ошибки.



package homevorks.homework03.task01;
import java.util.Scanner;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
public class Main {

    
 
  
    public static void main(String[] args) {
        System.out.println("Введите в одну строку, всё через пробел: \n        " + // 
                           "Фамилию Имя Отчество \n\n" + // 
                           "Дату рождения: \n        dd.mm.yyyy \n\n" + //
                           "Номер телефона: \n        +11 цифр \n\n" + //
                           "Пол - символ латиницей: \n        f или m \n");
        ScannerUserInput scanner = new ScannerUserInput();
        String str = scanner.getUserInput();
        isFirstLastName2(str);
    }  
    public static void isFirstLastName(String str) {
        Pattern pattern = Pattern.compile("\\s*(\\D+\\s\\D+\\s\\D+)\\s([01-31]{2}+\\.[01-12]{2}+\\.[1901-2022]{4}+)\\s((\\+*)\\d{2}+)\\s([f,m]{1}+)\\s*");
        Matcher matcher = pattern.matcher(str);
        if (matcher.find()){
            String dataUser = matcher.group();
            System.out.println("Отлично!!! Введенная строка: " + dataUser);    
            } 
        else{
            System.out.println("Введенная строка " + str + " не совпадает с параметрами: ");   
        }       
    }  
    
      public static Boolean isFirstLastName2(String str) {
        String pattern = str;
        Boolean matcher = pattern.matches("\\s*(\\D+\\s\\D+\\s\\D+)\\s([01-31]{2}+\\.[01-12]{2}+\\.[1901-2022]{4}+)\\s((\\+*)\\d{2}+)\\s([f,m]{1}+)\\s*");
        if (matcher){
            System.out.println("Отлично!!! Введенная строка: " + matcher);    
            } 
        else{
            System.out.println("Введенная строка " + str + " не совпадает с параметрами: ");   
        }
        return matcher;       
    }    


}  

      


   